{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import config from 'config';\nimport { existsSync, mkdirSync } from 'fs';\nimport { join } from 'path';\nimport winston from 'winston';\nimport winstonDaily from 'winston-daily-rotate-file';\n\n// logs dir\nconst logDir: string = join(__dirname, config.get('log.dir'));\n\nif (!existsSync(logDir)) {\n  mkdirSync(logDir);\n}\n\n//Define the log format\nconst logFormat = winston.format.printf(({timestamp,level,message}) => `${timestamp} ${level}: ${message}`);\n\n/*\n * Log Level\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\n */\nconst logger = winston.createLogger({\n  format:winston.format.combine(\n    winston.format.timestamp({\n      format:'YYYY:MM:DD HH:mm:ss',\n    }),\n    logFormat,\n  ),\n  transports: [\n    // debug log setting\n    new winstonDaily({\n      level: 'debug',\n      datePattern: 'YYYY-MM-DD',\n      dirname: logDir + '/debug', // log file /logs/debug/*.log in save\n      filename: `%DATE%.log`,\n      maxFiles: 30, // 30 Days saved\n      json: false,\n      zippedArchive: true,\n    }),\n    // error log setting\n    new winstonDaily({\n      level: 'error',\n      datePattern: 'YYYY-MM-DD',\n      dirname: logDir + '/error', // log file /logs/error/*.log in save\n      filename: `%DATE%.log`,\n      maxFiles: 30, // 30 Days saved\n      handleExceptions: true,\n      json: false,\n      zippedArchive: true,\n    }),\n  ],\n})\n\nlogger.add(\n  new winston.transports.Console({\n    format: winston.format.combine(winston.format.splat(), winston.format.colorize()),\n  }),\n);\n\nconst stream = {\n  write: (message: string) => {\n    logger.info(message.substring(0, message.lastIndexOf('\\n')));\n  },\n};\n\nexport { logger, stream };\n"],"names":["config","existsSync","mkdirSync","join","winston","winstonDaily","logDir","__dirname","get","logFormat","format","printf","timestamp","level","message","logger","createLogger","combine","transports","datePattern","dirname","filename","maxFiles","json","zippedArchive","handleExceptions","add","Console","splat","colorize","stream","write","info","substring","lastIndexOf"],"mappings":"AAAA,OAAOA,YAAY,SAAS;AAC5B,SAASC,UAAU,EAAEC,SAAS,QAAQ,KAAK;AAC3C,SAASC,IAAI,QAAQ,OAAO;AAC5B,OAAOC,aAAa,UAAU;AAC9B,OAAOC,kBAAkB,4BAA4B;AAErD,WAAW;AACX,IAAMC,SAAiBH,KAAKI,WAAWP,OAAOQ,GAAG,CAAC;AAElD,IAAI,CAACP,WAAWK,SAAS;IACvBJ,UAAUI;AACZ;AAEA,uBAAuB;AACvB,IAAMG,YAAYL,QAAQM,MAAM,CAACC,MAAM,CAAC;QAAEC,kBAAAA,WAAUC,cAAAA,OAAMC,gBAAAA;WAAa,AAAC,GAAeD,OAAbD,WAAU,KAAaE,OAAVD,OAAM,MAAY,OAARC;;AAEjG;;;CAGC,GACD,IAAMC,SAASX,QAAQY,YAAY,CAAC;IAClCN,QAAON,QAAQM,MAAM,CAACO,OAAO,CAC3Bb,QAAQM,MAAM,CAACE,SAAS,CAAC;QACvBF,QAAO;IACT,IACAD;IAEFS,YAAY;QACV,oBAAoB;QACpB,IAAIb,aAAa;YACfQ,OAAO;YACPM,aAAa;YACbC,SAASd,SAAS;YAClBe,UAAW;YACXC,UAAU;YACVC,MAAM;YACNC,eAAe;QACjB;QACA,oBAAoB;QACpB,IAAInB,aAAa;YACfQ,OAAO;YACPM,aAAa;YACbC,SAASd,SAAS;YAClBe,UAAW;YACXC,UAAU;YACVG,kBAAkB;YAClBF,MAAM;YACNC,eAAe;QACjB;KACD;AACH;AAEAT,OAAOW,GAAG,CACR,IAAItB,QAAQc,UAAU,CAACS,OAAO,CAAC;IAC7BjB,QAAQN,QAAQM,MAAM,CAACO,OAAO,CAACb,QAAQM,MAAM,CAACkB,KAAK,IAAIxB,QAAQM,MAAM,CAACmB,QAAQ;AAChF;AAGF,IAAMC,SAAS;IACbC,OAAO,SAACjB;QACNC,OAAOiB,IAAI,CAAClB,QAAQmB,SAAS,CAAC,GAAGnB,QAAQoB,WAAW,CAAC;IACvD;AACF;AAEA,SAASnB,MAAM,EAAEe,MAAM,GAAG"}